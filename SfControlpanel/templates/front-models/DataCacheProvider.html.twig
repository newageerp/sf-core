import React, { useContext, useEffect, useState } from "react";
import { useSelector, useDispatch, useTemplatesCore } from '@newageerp/v3.templates.templates-core';
import { SelectorQueueNae } from '../models/ormSelectors';
import { useTranslation } from 'react-i18next';
import { OpenApi } from '@newageerp/nae-react-auth-wrapper';
import { useRecoilValue } from 'recoil';
import { LogoLoader } from "@newageerp/ui.loaders.logo-loader";

export interface DataCacheProviderValue {
    queue: QueueItem[],
    addToQueue: (item: QueueItem) => void,
}

export const DataCacheContext = React.createContext<DataCacheProviderValue>({
    queue: [],
    addToQueue: (item: QueueItem) => { console.log('addToQueue', item) },
});

export const useDataCache = () => useContext(DataCacheContext);

export interface DataCacheProps {
    children: any;
}

interface QueueItem {
    id?: string,
    schema: string,
    elementId: number,
    fields: string[]
}

export const DataCacheProvider = (props: DataCacheProps) => {
    const { dataCache } = useTemplatesCore();
    const userState: any = useRecoilValue(OpenApi.naeUserState);

    const { t } = useTranslation();

    const dispatch = useDispatch();

    // const [queue, setQueue] = useState<QueueItem[]>([]);
    const queue = useSelector(state => SelectorQueueNae(state));
    const [isLoading, setIsLoading] = useState(false);
    const [isQueueLoading, setIsQueueLoading] = useState(false);

    const [isCaching, setIsCaching] = useState(true);
    const [preloadCache] = OpenApi.useURequest('NAEUMultipleListForModels');
    const isLoggedIn = !!userState && userState.id > 0;
    useEffect(() => {
        if (!userState || !userState.id) {
            return;
        }
        preloadCache({
            data: dataCache.cacheData(userState)
        }).then((res: any) => {
            const keys = Object.keys(res.data);
            keys.forEach(k => {
                dispatch({
                    type: "UPSERT_" + k,
                    payload: res.data[k].data
                })
            })
            setIsCaching(false);
        })
    }, [userState]);

    const loadElements = (items: QueueItem[]) => {
        setIsLoading(true)
        // console.log('loadElements', items.length);
        let loadCacheData: any = {};
        items.forEach((item) => {
            if (!(item.schema in loadCacheData)) {
                loadCacheData[item.schema] = {
                    schema: item.schema,
                    ids: [],
                };
            }
            loadCacheData[item.schema].ids.push(item.elementId);
        })
        const requestCacheData: any[] = [];
        Object.keys(loadCacheData).forEach(k => {
            const _data = loadCacheData[k];

            requestCacheData.push(
                {
                    schema: _data.schema,
                    page: 1,
                    pageSize: _data.ids.length,
                    filters: [{ and: [["i.id", "in", _data.ids, true]] }]
                }
            );

        })
        // console.log('loadElements', requestCacheData);
        preloadCache({
            data: requestCacheData
        }).then((res: any) => {
            const keys = Object.keys(res.data);
            keys.forEach(k => {
                dispatch({
                    type: "UPSERT_" + k,
                    payload: res.data[k].data
                })
            })
            setIsLoading(false);
        })
    }

    const addToQueue = (item: QueueItem) => {
        // add(item);
        item.id = item.schema + "-" + item.elementId;

        // console.log('addToQueue', item.id);

        dispatch({
            type: "UPSERT_QUEUE",
            payload: item
        })
    }

    useEffect(() => {
        // console.log('queue', queue);
        if (!isLoading && !isQueueLoading) {
            if (queue.length > 0) {
                loadElements(queue);
                dispatch(
                    {
                        type: "REMOVE_QUEUE",
                        payload: queue
                    }
                )
            }
        }
    }, [isLoading, isQueueLoading, queue]);

    return (
        <DataCacheContext.Provider
            value={
                {
                queue,
                addToQueue,
            }
            }
        >
            {isCaching && isLoggedIn ?

                <div className="tw3-flex tw3-w-full tw3-h-[100vh] tw3-items-center tw3-animate-pulse tw3-bg-slate-50">
                    <div className={"tw3-mx-auto"}>
                        <LogoLoader size={150} />
                    </div>
                </div>

                : props.children}
        </DataCacheContext.Provider>
    );
};
