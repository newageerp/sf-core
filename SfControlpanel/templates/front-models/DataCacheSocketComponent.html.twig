import React, { Fragment, useEffect, useState } from 'react'
import { NaeSSchemaMap } from '../config/NaeSSchema';
import { cacheData, useDataCache } from './DataCacheProvider';


import { useRecoilValue } from '@newageerp/v3.templates.templates-core';
import { OpenApi } from '@newageerp/nae-react-auth-wrapper';
import { SFSSocketService } from '../../v3/navigation/NavigationComponent';
import { getSchemaByClassName } from '../../v3/utils';

export default function DataCacheSocketComponent() {
    const userState: any = useRecoilValue(OpenApi.naeUserState);

    const { addToQueue } = useDataCache();
    const [socketItem, setSocketItem] = useState();

    const onSocketDoRequest = (data: any) => {
        let schema = getSchemaByClassName(data.schema);

        let result = getDataCacheForSchema(data.schema);

        if (result) {
            const dataToCheck = result.dataToCheck.map((el: any) => el.id);

            const cacheDataProject: any = cacheData({}).find((el: any) => el.schema === schema)

            if (dataToCheck.indexOf(data.id) >= 0 || (!!cacheDataProject && cacheDataProject.forceSync)) {
                const item = {
                    elementId: data.id,
                    schema: schema,
                    fields: result.fields,
                }
                addToQueue(item);
            }
        }
    }

    const onForceSocketDoRequest = (data: any) => {
        {% if hasNotes %}
        if (data.schema === NaeSSchemaMap.Note.className) {
            const item = {
                elementId: data.id,
                schema: NaeSSchemaMap.Note.schema,
                fields: INoteFieldsNae,
            }
            addToQueue(item);
        }
        {% endif %}
    }

    useEffect(() => {
        if (socketItem) {
            onSocketDoRequest(socketItem);
        }
    }, [socketItem]);

    useEffect(() => {
        SFSSocketService.addCallback(
            "data-update-all",
            "data-update-all",
            setSocketItem
        );
        return () => {
            SFSSocketService.removeCallback(
                "data-update-all",
                "data-update-all"
            );
        };
    }, []);

{% if hasNotes %}
    useEffect(() => {
        SFSSocketService.subscribe(`notes-${userState.id}`);
        SFSSocketService.subscribe(`notes-${userState.permissionGroup}`);

        SFSSocketService.addCallback(
            `notes-create`,
            `notes-create`,
            onForceSocketDoRequest
        );
        return () => {
            SFSSocketService.unsubscribe(`notes-${userState.id}`);
            SFSSocketService.unsubscribe(`notes-${userState.permissionGroup}`);

            SFSSocketService.removeCallback(
                `notes-create`,
                `notes-create`,
            );
        };
    }, [userState]);
{% endif %}
    return (
        <Fragment />
    )
}
