import React, { useState, Fragment } from 'react'
import { PdfLinesContainer } from '@newageerp/ui.components.element.pdf-lines-container';
import { PdfLine } from '@newageerp/ui.components.element.pdf-line';
import axios from 'axios'
import { PropsId } from '../../../UserComponents/ModelsCacheData/types';
import { PopupPdf } from '@newageerp/ui.popups.base.popup-pdf';
import { PdfWindow } from '@newageerp/ui.files.pdf.pdf-window';
import { MailsForm } from '@newageerp/ui.mails.mails-form';
import { PopupMail } from '@newageerp/ui.popups.base.popup-mail';
import {WhiteCard} from '@newageerp/ui.cards.base.white-card'
import { WidgetProps } from '@newageerp/nae-react-ui/dist/UI/Widget/NEWidgets';
import { useTranslation } from 'react-i18next';

type PdfResponse = {
    url: string,
    viewUrl: string,
    downloadUrl: string,
    printUrl: string,
    fileName: string,
}

type {{ compName }}ItemProps = {
    title: string,
    template: string,
    skipStamp?: boolean,
    skipSign?: boolean,
} & PropsId

const loadPdfData = async (id: number, template: string, skipStamp?: boolean, skipSign?: boolean) => {
    let url = `/app/nae-core/pdf/pdfInfo/{{ schema }}/${template}/${id}?pdf=1`;
    if (skipStamp) {
        url += '&skipStamp=true'
    }
    if (skipSign) {
        url += '&skipSign=true'
    }
    const res = await axios.get(url);
    return res.data;
}

export const {{ compName }}Item = (props: {{ compName }}ItemProps) => {
    const [pdfData, setPdfData] = useState<PdfResponse>();
    const [showPdf, setShowPdf] = useState(false);
    const [showEmail, setShowEmail] = useState(false);
    const [isLoading, setLoading] = useState(false);

    const onReset = () => {
        setPdfData(undefined);
    }

    const onDownload = async () => {
        let urlToOpen = "";
        if (!pdfData) {
            setLoading(true);
            const _pdfData: PdfResponse = await loadPdfData(props.id, props.template, props.skipStamp, props.skipSign);
            setPdfData(_pdfData);
            setLoading(false);
            urlToOpen = _pdfData.downloadUrl;
        } else {
            urlToOpen = pdfData.downloadUrl;
        }
        if (urlToOpen) {
            window.open(urlToOpen, '_blank');
        }
    }

    const onPrint = async () => {
        let urlToOpen = "";
        if (!pdfData) {
            setLoading(true);
            const _pdfData: PdfResponse = await loadPdfData(props.id, props.template, props.skipStamp, props.skipSign);
            setLoading(false);
            setPdfData(_pdfData);
            urlToOpen = _pdfData.printUrl;
        } else {
            urlToOpen = pdfData.printUrl;
        }
        if (urlToOpen) {
            window.open(urlToOpen, '_blank');
        }
    }

    const onClick = async () => {
        if (!pdfData) {
            setLoading(true);
            const _pdfData: PdfResponse = await loadPdfData(props.id, props.template, props.skipStamp, props.skipSign);
            setLoading(false);
            setPdfData(_pdfData);
            setShowPdf(true);
        } else {
            setShowPdf(true);
        }
    }

    const onSend = async () => {
        if (!pdfData) {
            setLoading(true);
            const _pdfData: PdfResponse = await loadPdfData(props.id, props.template, props.skipStamp, props.skipSign);
            setLoading(false);
            setPdfData(_pdfData);
            setShowEmail(true);
        } else {
            setShowEmail(true);
        }
    }

    return (
    <Fragment>
        <PdfLine title={props.title} onReset={pdfData?onReset:undefined} onDownload={onDownload} onPrint={onPrint} onClick={onClick} onSend={onSend} loading={isLoading} />
        {showPdf && !!pdfData &&
            <PopupPdf onClose={() => setShowPdf(false)} title={props.title}>
                <PdfWindow
                    pdf={pdfData}
                    onBack={() => setShowPdf(false)}
                    onEmail={onSend}
                    inPopup={true}
                />
            </PopupPdf>
        }
        {showEmail && !!pdfData &&
            <PopupMail>
                <MailsForm
                    onSend={() => setShowEmail(false)}
                    onBack={() => setShowEmail(false)}
                    extraData={
                        {
                            id: props.id,
                            pdf: true,
                            schema: '{{ schema }}',
                            template: 'pdf',
                        }
                    }
                    files={
                        [
                            {
                                name: pdfData.fileName,
                                link: pdfData.downloadUrl
                            }
                        ]
                    }
                />
            </PopupMail>
        }
    </Fragment>);
}

interface ItemProps extends PropsId {
    skipStamp?: boolean,
    skipSign?: boolean,
}

{% for pdf in pdfs %}
    export const {{  pdf.compName  }} = (props: ItemProps) => {
        return (<{{ compName }}Item title="{{ pdf.title }}" template="{{ pdf.template }}" id={props.id} skipStamp={props.skipStamp} skipSign={props.skipSign} />);
    }
{% endfor %}

export const {{ compName }} = (props: PropsId) => {
    const {t} = useTranslation();

    const [sign, setSign] = useState(true);
    const toggleSign = () => setSign(!sign);

    let key = "pdf-container-sign";
    if (!sign) {
        key = "pdf-container-no-sign";
    }

    return (
    <PdfLinesContainer
        key={key}
        title={t("PDF dokumentai")}
        signature={
            {
                state: sign,
                toggleState: toggleSign
            }
        }
    >
        {% for pdf in pdfs %}
            {% if pdf.skipList %}
            {% else %}
                <{{ pdf.compName }} id={props.id} skipStamp={!sign} skipSign={!sign} />
            {% endif %}
        {% endfor %}
    </PdfLinesContainer>
    )
}

export const {{ compName }}Widget = (props: WidgetProps) => {
    return ( <WhiteCard><{{ compName }} id={props.element.id} /></WhiteCard> )
}