import { useEffect } from "react";
import { NaeSSchemaMap } from "../../config/NaeSSchema";
import { useDataCache } from "./DataCacheProvider";
import { useSelector } from "react-redux";
import { Selector{{ modelName }}Nae } from "../Models/ormSelectors";

interface ChildId {
  id: number
}

export interface I{{ modelName }}ModelNae {
{% for key, type in modelsStruct %}
  {% if type is iterable %}
  {{ key }}: {
    {% for keyB, typeB in type %}
      {% if typeB is iterable %}
      {{ keyB }}: {
        {% for keyC, typeC in typeB %}
      {{ keyC }}: {{ typeC }},
        {% endfor %}
        },
      {% else %}
    {{ keyB }}: {{ typeB }},
      {% endif %}
    {% endfor %}
  },
  {% else %}
  {{ key }}: {{ type }},
  {% endif %}
{% endfor %}
}

export const I{{ modelName }}FieldsNae = {{ modelFieldsArray|raw }};

export function use{{ modelName }}HookNae(id: number) : I{{ modelName }}ModelNae {
  // @ts-ignore
  const element = useSelector((state) => Selector{{ modelName }}Nae(state, id));

  const { addToQueue } = useDataCache();

  useEffect(() => {
    if (!element) {
      addToQueue({
        elementId: id,
        schema: NaeSSchemaMap.{{ modelName }}.schema,
        fields: I{{ modelName }}FieldsNae,
      });
    }
  }, [element, id]);

  return element;
}
