import React, { useState, Fragment } from "react";
import { Table, Td, Th } from "@newageerp/ui.table.base.table";
import { useTranslation } from "react-i18next";
import { Icon, IconType } from '@newageerp/ui.icons.base.icon'
import { IconList } from '@newageerp/ui.icons.base.icon-list'
import { OpenApi } from "@newageerp/nae-react-auth-wrapper";
import { TwTextColors, TwBackgroundColors } from "@newageerp/ui.styles.tailwind";
import { Button } from "@newageerp/ui.buttons.base.button";
import { UI } from "@newageerp/nae-react-ui";
import TemplateLoader, { useTemplateLoader } from "../../v3/templates/TemplateLoader";
import { ServerFilterItem } from '@newageerp/ui.components.list.filter-container'

{{ TP_IMPORT|raw }}

export interface TableSelectedProps {
    onSelect: (selectedIds: number[]) => void,
    toolbarContent: any
}

interface Props {
    data: any,
    doReload: () => void,
    className?: string,

    navigate?: (schema: string, id: number | string, el: any) => void,

    selection?: TableSelectedProps,

    dataTotals?: any,

    customComponentOptions?: any,

    addNewBlockFilter?: (filter: ServerFilterItem) => void,
}

export default function {{ TP_COMP_NAME }}(props: Props) {
    const { data: tData } = useTemplateLoader();

    const { data, navigate } = props;
    const { t } = useTranslation();

    const [doRemove, doRemoveData] = OpenApi.useURequest('NAEURemoveMultiple');

    const [selectedIds, setSelectedIds] = useState<number[]>([]);

    const dataIds = data.map((i: any) => i?.id);
    const intersection = dataIds.filter((value: number) => selectedIds.includes(value));
    const isCheckedAll = intersection.length === data.length;

    const toggleSelectAll = () => {
        let _selected: number[] = JSON.parse(JSON.stringify(selectedIds));
        if (isCheckedAll) {
            dataIds.forEach((id: number) => {
                if (_selected.indexOf(id) >= 0) {
                    _selected = _selected.filter(i => id !== i);
                } else {

                }
            })
        } else {
            dataIds.forEach((id: number) => {
                if (_selected.indexOf(id) >= 0) {
                } else {
                    _selected.push(id);
                }
            })
        }
        setSelectedIds(_selected);
    }

    const toggleSelect = (id: number) => {
        const _selected: number[] = JSON.parse(JSON.stringify(selectedIds));
        if (selectedIds.indexOf(id) >= 0) {
            setSelectedIds(_selected.filter(i => id !== i));
        } else {
            setSelectedIds([..._selected, id]);
        }
    }

    const doMultipleRemove = () => {
        doRemove({
            ids: selectedIds,
            schema: '{{ TP_SCHEMA }}'
        }).then(() => {
            setSelectedIds([]);
            props.doReload();
        })
    }

    return (
    <Fragment>
        {selectedIds.length > 0 && <div className={`tw3-flex tw3-items-center tw3-gap-6 tw3-mb-2 ${TwTextColors.slate400}`}>
            <p>{t('Pažymėta')}: {selectedIds.length}</p>
            <Button confirmation={true} bgColor={TwBackgroundColors.white} onClick={doMultipleRemove}><Icon type={IconType.Solid} icon={IconList.trash} ping={doRemoveData.loading} /></Button>
        </div>}
        <Table
            className={props.className}
            thead={
                <thead>
                    <TemplateLoader templates={tData.tableHeader} templateData={ { addNewBlockFilter: props.addNewBlockFilter } } />
                </thead>
            }
            tbody={
                <tbody>
                    {data.map((item: any) => {
                        return (
                            <TemplateLoader key={`row-${item?.id}`} templates={tData.tableRow} templateData={ { element: item, doReload: props.doReload } } />
                        )
                    })}
                </tbody>
            }
        />

        {% for total in totals %}
            <div className="flex items-center justify-end">
                <label className="text-sm font-semibold text-right w-36 p-2 bg-white">{{ total.title }}</label>
                {!!props.dataTotals && 
                <span className="w-36 text-right text-sm p-2 bg-white">{props.dataTotals['{{ total.field }}'].toFixed(2)}</span>
                }
            </div>
        {% endfor %}
    </Fragment>
    )
}