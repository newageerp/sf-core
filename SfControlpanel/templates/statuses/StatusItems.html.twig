import React, { Fragment } from "react";
import { useTranslation } from "@newageerp/v3.templates.templates-core";
import classNames from 'classnames'
import {StatusChangeButton} from '@newageerp/v2.element.status-change-button'
import { use{{ schemaUc }}HookNae } from "../../_custom/hooks/use{{ schemaUc }}HookNae";
import { PropsId } from "../../_custom/models-cache-data/types";
import {Short} from '@newageerp/v2.element.status-badge.short';
import {Base} from '@newageerp/v2.element.status-badge.base';
import { ContentWidgetProps } from "../../v3/utils";
import { useUSave } from "@newageerp/v3.bundles.hooks-bundle";

interface StatusProps {
    short?: boolean,
    table?: boolean,
    className?: string,
    size?: string
}

interface StatusElementProps extends StatusProps {
    id: number
}

interface StatusPropsWithStatus extends StatusProps {
    status: number,
}

{% for status in statusData %}
    export const {{ status.statusName }} = (props: StatusProps) => {
        const { t } = useTranslation();

        const Comp = props.short?Short:Base;
        return (
            <Comp 
                variant={"{{ status.bgColor }}"} 
            >
              {props.short?t('{{ status.text }}').substr(0, 1):t('{{ status.text }}')}
            </Comp>
        )
       
    };
{% endfor %}

export const {{ TP_COMP_NAME }} = (status: number, type: string, short?: boolean, table?: boolean) => {
{% for status in statusData %}
    if (status === {{ status.status }} && type === "{{ status.type }}") {
        return <{{ status.statusName }} short={short} table={table} />;
    }
{% endfor %}
}

export const {{ TP_COMP_NAME }}List = {{ statusJson|raw }};

export const {{ TP_COMP_NAME }}Map : any = {
    {% for status in statusData %}
        '{{ status.type }}-{{ status.status }}': {{ status.statusName }},
    {% endfor %}
};

{% for k,c in statusCompJson %}

export const {{ TP_COMP_NAME }}{{ k }}Widget = (props: ContentWidgetProps) => {
    const element = use{{ schemaUc }}HookNae(props.element.id);

    const [doSave] = OpenApi.useUSave('{{ schema }}');
    const changeStatus = (s: number) => {
        doSave({'{{ c.type }}': s}, props.element.id);
    }

    if (!element) {
        return <Fragment/>
    }

    return (
        <StatusChangeButton
            schema={"{{ schema }}"}
            type={"{{ c.type }}"}
            id={props.element.id}

            onStatusChange={changeStatus}
            reloadState={element.{{ c.type }}}

            showOnlyActive={props.options.showOnlyActive}
        />
    )
};

export const {{ TP_COMP_NAME }}{{ k }}ElementStatus = (props: StatusElementProps) => {
    const element = use{{ schemaUc }}HookNae(props.id);
    if (!element) {
        return <Fragment/>
    }

    const key = `{{ c.type }}-${element['{{ c.type }}']}`;
    const CompName = {{ TP_COMP_NAME }}Map[key];

    if (!CompName) {
        return <Fragment/>
    }

    return <CompName {...props}/>
}

{% endfor %}