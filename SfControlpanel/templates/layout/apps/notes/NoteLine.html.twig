import React, { Fragment, useState } from "react";
import { useTranslation } from "react-i18next";
import parse from "html-react-parser";
import { useSelector } from "@newageerp/v3.templates.templates-core";
import { useRecoilValue } from "recoil";
import { OpenApi } from "@newageerp/nae-react-auth-wrapper";
import { useComponentVisible } from "@newageerp/v3.bundles.hooks-bundle";
import {
  TwBackgroundColors,
  TwBorderColors
} from "@newageerp/ui.ui-bundle";
import { MenuItem } from "@newageerp/v3.bundles.modal-bundle";
import { NotesAnswerForm, NotesQuoteTextSelector, NotesEditForm } from '@newageerp/sfs.notes.notes-bundle'
import { SFSOpenViewModalWindowProps } from '@newageerp/v3.bundles.popup-bundle'
import { getHookForSchema } from "../../_custom/models-cache-data/ModelFields";
import { selectorBySchemaSlug } from "../../_custom/models/ormSelectors";
import { MainButton, ToolbarButtonWithMenu } from "@newageerp/v3.bundles.buttons-bundle";

interface IData {
  id: number;
  notifyAccept: any;
  notify: any;
  creator: {
    id: number;
    fullName: string;
  };
  createdAt: string;
  content: string;
  parentId: number;
  parentSchema: string;
  replyTo: number;
}

interface Props {
  doReload: () => void;
  showParentLink?: boolean;
  note: IData; // NOTE
  parentElementCallack?: (parentId: number, parentSchema: string) => any;
  parentSchemaFix?: (schema: string) => string,
}

const moduleName = "note";

export default function NoteLine(props: Props) {
  const { ref, isComponentVisible, setIsComponentVisible } =
    useComponentVisible(false);
  const toggleComponentVisible = () =>
    setIsComponentVisible(!isComponentVisible);

  const usersSelector = selectorBySchemaSlug("user");
  // @ts-ignore
  const users = useSelector((state) => usersSelector(state));

  const { note, doReload } = props;
  const userState: any = useRecoilValue(OpenApi.naeUserState);
  const { t } = useTranslation();
  const [showAnswerForm, setShowAnswerForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);

  const toggleShowPopup = () =>
    SFSOpenViewModalWindowProps({
      id: note.parentId,
      schema: props.parentSchemaFix ? props.parentSchemaFix(note.parentSchema) : note.parentSchema,
    });

  const [saveData, saveDataParams] = OpenApi.useUSave(moduleName);
  const hideNote = () => {
    if (saveDataParams.loading) return;

    saveData(
      {
        notifyAccept: [...note.notifyAccept, userState.id],
      },
      note.id
    ).then(() => {
      doReload();
    });
  };

  const showParentLink =
    props.showParentLink && note.parentId > 0 && !!note.parentSchema;

  const extraClassName = [];

  const isCreator = note.creator && note.creator.id === userState.id;

  // if (isCreator) {
  //   extraClassName.push("float-right");
  // }

  const forMe =
    note.notify.indexOf(userState.id) >= 0 ||
    note.notify.indexOf(userState.permissionGroup) >= 0;
  const unread = forMe && note.notifyAccept.indexOf(userState.id) === -1;

  if (unread) {
    extraClassName.push(`${TwBackgroundColors.sky50} "border border-sky"`);
  } else if (forMe) {
    extraClassName.push("border " + TwBorderColors.sky);
  } else {
    extraClassName.push("border " + TwBorderColors.slate200);
  }

  const parentElementName = t("Atidaryti elementą");
  // if (!!note.salesOrder) {
  //   parentElementName =
  //     note.salesOrder.serialNumber + " (" + note.salesOrder.soClientName + ")";
  // }
  // if (!!note.cargo) {
  //   parentElementName = note.cargo.serialNumber + " (" + note.cargo.soClientJson.clientFilialName + ")";
  // }
  // if (!!note.calculation) {
  //   parentElementName = note.calculation.serialNumber;
  // }

  const isCanAnswer = !isCreator && !!note.creator;
  const isCanEdit = isCreator && (!note.notify || note.notify.length === 0);

  return (
    <div key={"note-" + note.id} className={"flex w-full"}>
      {isCreator && <span style={ { width: "10%" } }></span>}
      <div
        style={ { width: "90%" } }
        className={"px-1 py-1  rounded-sm " + extraClassName.join(" ")}
      >
        <div className={"flex w-full items-center gap-1"}>
          <i className={"fad fa-comments-alt text-nsecondary"} />
          <div className={"text-gray-400 text-xs"}>{note.createdAt}</div>
          <div className={"text-gray-600 text-xs flex-grow"}>
            {note.creator ? note.creator.fullName : "Sistema"}
            {note.notify.length > 0 && (
              <Fragment>
                {" -> "}
                {note.notify.map((userId: number, index: number) => {
                  const userData = users.filter(
                    (user: any) => user.id === userId
                  );
                  if (userData.length > 0) {
                    return (
                      <Fragment key={"note-" + note.id + "-" + index}>
                        {index > 0 ? ", " : ""}
                        {userData[0].fullName}
                      </Fragment>
                    );
                  }
                  return (
                    <Fragment key={"note-" + note.id + "-" + index}>
                      {index > 0 ? ", " : ""}
                      {t("Nežinomas")}
                    </Fragment>
                  );
                })}
              </Fragment>
            )}
          </div>
          {showParentLink && (
            <MainButton
              onClick={toggleShowPopup}
              color={"white"}
              className={"underline hover:no-underline"}
            >
              {props.parentElementCallack
                ? props.parentElementCallack(note.parentId, note.parentSchema)
                : parentElementName}
            </MainButton>
          )}

          {unread && (
            <MainButton
              color={"whiteandpurple"}
              onClick={hideNote}
              className={"underline hover:no-underline"}
            >
              {saveDataParams.loading ? t("Sending") : t("Mark as read")}
            </MainButton>
          )}

          {(isCanEdit || isCanAnswer) && (
            <ToolbarButtonWithMenu
              button={ {
                iconName: "circle-ellipsis-vertical"
              } }
              menu={ {
                children: <Fragment>
                  {isCanEdit && (
                    <MenuItem onClick={() => setShowEditForm(true)}>
                      {t("Update")}
                    </MenuItem>
                  )}
                  {isCanAnswer && (
                    <MenuItem onClick={() => setShowAnswerForm(true)}>
                      {t("Reply")}
                    </MenuItem>
                  )}
                </Fragment>
              } }
            />
          )}
        </div>
        {!!note.replyTo && <NotesQuoteTextSelector id={note.replyTo} selector={getHookForSchema(moduleName)} />}
        <div className={"w-full text-sm"}>{parse(note.content)}</div>
        {showAnswerForm && (
          <NotesAnswerForm
            options={
              {}
            }
            parentElementId={note.parentId}
            parentSchema={note.parentSchema}
            reloadData={() => {
              if (unread) {
                hideNote();
              } else {
                props.doReload();
              }
              setShowAnswerForm(false);
            }}
            defaultSelected={[
              { value: note.creator.id, label: note.creator.fullName },
            ]}
            quoteContent={note.content}
            replyTo={note.id}

            onClose={() => setShowAnswerForm(false)}
            saveFunc={OpenApi.useUSave}
            users={users}
          />
        )}
        {showEditForm && (
          <NotesEditForm
            options={
              {}
            }
            noteId={note.id}
            reloadData={() => {
              props.doReload();
              setShowEditForm(false);
            }}
            defaultSelected={note.notify}
            defaultContent={note.content}

            onClose={() => setShowEditForm(false)}
            saveFunc={OpenApi.useUSave}
            users={users}
          />
        )}
      </div>
      {!isCreator && <span style={ { width: "10%" } }></span>}
    </div>
  );
}
