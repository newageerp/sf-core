import React, { Fragment, useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import { NotesPageToolbar } from '@newageerp/sfs.apps.apps-bundle'
import { OpenApi } from "@newageerp/nae-react-auth-wrapper";
import { MainToolbarTitle } from '@newageerp/v3.bundles.layout-bundle'
import { LogoLoader } from "@newageerp/v3.bundles.layout-bundle";
import NotesNameResolver, { NotesSchemaFix } from "../../_custom/models-cache-data/NotesNameResolver";
import { PageContainer } from '@newageerp/ui.ui-bundle'
import NoteLine from "./NoteLine";
import { getKeysFromObject } from "../../v3/utils";
import { showTaskSentNotification } from "../../v3/navigation/NavigationComponent";
import { useTemplatesCore } from '@newageerp/v3.templates.templates-core';

const pageSize = 20;

interface IData {
    id: number;
    notifyAccept: any;
    notify: any;
    creator: {
        id: number;
        fullName: string;
    };
    createdAt: string;
    content: string;
    parentId: number;
    parentSchema: string;
    replyTo: number;
}

const defObject: IData = {
    id: 0,
    notifyAccept: "",
    notify: "",
    creator: {
        id: 0,
        fullName: "",
    },
    createdAt: "",
    content: "",
    parentId: 0,
    parentSchema: "",
    replyTo: 0,
};


export default function NotesPageContent() {
    const {userState} = useTemplatesCore()

    const [readAllR] = OpenApi.useURequest('NAENotesReadAll');

    const [getData, getDataParams] = OpenApi.useUList<IData>('note', getKeysFromObject(defObject));
    const [pages, setPages] = useState(1);
    const [activePage, setActivePage] = useState(1);

    const [activeState, setActiveState] = useState(0);

    const { t } = useTranslation();

    const readAll = () => {
        readAllR({});
        showTaskSentNotification()
    }

    const loadData = () => {
        const filters: any = [
            {
                "and": [
                    {
                        "or": [
                            ['i.notify', 'JSON_CONTAINS', userState.id.toString(), true],
                            ['i.notify', 'JSON_CONTAINS', `"${userState.permissionGroup}"`, true],
                        ]
                    }

                ]
            }
        ];
        if (activeState === 0) {
            filters[0].and.push(['i.notifyAccept', 'JSON_NOT_CONTAINS', userState.id.toString(), true]);
        }
        getData(filters, activePage, 20, [{ key: 'i.id', value: 'DESC' }])
    };
    useEffect(loadData, [activeState, activePage]);

    const data: IData[] =
        getDataParams && getDataParams.data && getDataParams.data.data
            ? getDataParams.data.data
            : [];

    useEffect(() => {
        if (getDataParams.data) {
            setPages(Math.ceil(getDataParams.data.records / pageSize));
        }
    }, [getDataParams.data]);

    const parentElementCallack = (parentId: number, parentSchema: string) => {
        return (<NotesNameResolver parentId={parentId} parentSchema={parentSchema} />)
    }

    return (
        <Fragment>
            <MainToolbarTitle title={t('Comments')} />
            <NotesPageToolbar
                onReadAll={readAll}
                onReload={loadData}
                read={
                {
                    value: activeState.toString(),
                    onChange: (v) => setActiveState(parseInt(v, 10))
                }
                }
            />
            {getDataParams.loading ? (
                <LogoLoader />
            ) : (
                <Fragment>
                    {!!data && (
                        <Fragment>
                            <div className={"tw3-w-full tw3-space-y-2"}>
                                {data.map((note: IData) => {
                                    return (
                                        <NoteLine
                                            key={"note-l-" + note.id}
                                            note={note}
                                            showParentLink={true}
                                            doReload={loadData}
                                            parentElementCallack={parentElementCallack}
                                            parentSchemaFix={NotesSchemaFix}
                                        />
                                    );
                                })}
                                <div className={"tw3-clear-both"}></div>
                            </div>
                        </Fragment>
                    )}
                </Fragment>
            )}
            <PageContainer
                activePage={activePage}
                pages={pages}
                setActivePage={setActivePage}
            />

        </Fragment>
    );
}
