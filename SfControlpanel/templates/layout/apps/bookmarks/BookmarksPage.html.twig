import { OpenApi } from '@newageerp/nae-react-auth-wrapper'
import React, { useState, useEffect, Fragment } from 'react'
import { useTranslation } from '@newageerp/v3.templates.templates-core'
import {TemplatesLoader} from '@newageerp/v3.templates.templates-core';
import { getSchemaTitle } from '../../v3/utils'
import { TabContainer } from "@newageerp/ui.ui-bundle";
import { WhiteCard } from '@newageerp/v3.bundles.widgets-bundle'
import { axiosInstance } from "@newageerp/v3.bundles.utils-bundle";
import { MainToolbarTitle } from '@newageerp/v3.bundles.layout-bundle'
import { useTemplatesCore } from '@newageerp/v3.templates.templates-core';

interface IFollow {
    id: number
    sourceId: number
    sourceSchema: string
}

const defElement: IFollow = {
    id: 0,
    sourceId: 0,
    sourceSchema: ''
}

export default function BookmarksPage() {
    const {userState} = useTemplatesCore()

    const { t } = useTranslation()
    
    const [listSchema, setListSchema] = useState<any>()

    const loadData = () => {
        const url = '/app/proxy/bookmarks/get-for-user';
        axiosInstance
            .post(
                url,
                { data: { user: userState.id } }
            )
            .then((response) => {
                if (response.status === 200) {
                    let _listSchema: any = {}

                    response.data.data.forEach((follow: IFollow) => {
                        if (!(follow.sourceSchema in _listSchema)) {
                            _listSchema[follow.sourceSchema] = []
                        }
                        _listSchema[follow.sourceSchema].push(follow.sourceId)
                    })

                    setListSchema(_listSchema)
                } else {
                    // UIConfig.toast.error(t('Klaida'))
                }
            });
    };
    useEffect(loadData, []);


    const schemas = listSchema ? Object.keys(listSchema) : []

    const schemaComponents = schemas.map(s => {
        const els: any = listSchema[s]
        const idsMap = els.filter((f: number) => f > 0)
        const extraFilter = {
            and: [['i.id', 'in', idsMap, true]]
        }

        return (
            {
                schema: s,
                extraFilter: extraFilter,
                title: getSchemaTitle(s, true)
            }
        )
    })

    const items: any[] = [];
    schemaComponents.forEach((comp: any, idX: number) => {
        items.push(
            {
                content: (<TemplatesLoader
                    templateName="PageInlineList"
                    data={
                        {
                            schema: comp.schema,
                            type: "main",
                            extraFilters: [comp.extraFilter]
                        }
                    }
                />),
                tab: {
                    children: comp.title,
                },
            }
        );
    });

    if (items.length === 0) {
        return <Fragment />
    }

    return (<Fragment>
        <MainToolbarTitle title={t('Bookmarks')} />
        {items.length > 0 && 
            <WhiteCard isCompact={true}><TabContainer items={items} /></WhiteCard>
        }
    </Fragment>);
}
