import React from 'react'
import { useComponentVisible } from '@newageerp/hooks.use-component-visible'
import { useTranslation } from 'react-i18next';
import { SFSOpenEditModalWindowProps, SFSOpenEditWindowProps } from '@newageerp/v3.bundles.popup-bundle'
import { useNaePopup } from '../../../v3/old-ui/OldPopupProvider'

import { Menu, MenuItem } from '@newageerp/v3.bundles.modal-bundle'
import { ToolbarButtonWithMenu } from '@newageerp/v3.bundles.buttons-bundle'

interface Props {
    element: any,
}

export default function {{ compName }}(props: Props) {
    const {t} = useTranslation();

    const { isPopup } = useNaePopup();

    const createOptions: any = {};

    {% for item in items %}
        createOptions["{{ item.target }}"] = {
            options: {
                convert: {
                    schema: "{{ schema }}",
                    element: { id: props.element.id },
                }
            },
            type: "{{ item.type }}",
            inPopup: {% if item.forcePopup %}true{% else %}false{% endif %},
            disabled: () => props.element.scopes && props.element.scopes.indexOf(`disable-copy-{{ schema }}-{{ item.target }}`) >= 0,
        }
    {% endfor %}

    const openLink = (target: string) => {
        const targetOptions = createOptions[target];

        if (isPopup || targetOptions.inPopup) {
            SFSOpenEditModalWindowProps({
                id: "new",
                schema: target,
                options: { createOptions: targetOptions.options },
                type: targetOptions.type,
            });
        } else {
            SFSOpenEditWindowProps(
                {
                    id: "new",
                    schema: target,
                    options: { createOptions: targetOptions.options },
                    type: targetOptions.type,
                }
            )
        }
    }

    return (
            <ToolbarButtonWithMenu
                button={{
                    onClick: toggleComponentVisible,
                    iconName: "copy"
                }}
                menu={
                    {
                        children: <Fragment>
                    {% for item in items %}
                        <MenuItem
                                    onClick={() => openLink("{{ item.target }}")}
                                    isDisabled={createOptions["{{ item.target }}"].disabled()}
                        >
                            {{  item.targetTitle }}
                        </MenuItem>
                    {% endfor %}
                        </Fragment>
                    }
                    
                }
            />
    )
}
