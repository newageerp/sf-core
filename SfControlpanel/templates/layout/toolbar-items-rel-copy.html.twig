import { SquareButton } from '@newageerp/ui.buttons.base.square-button'
import React from 'react'
import { TwBackgroundColors, TwTextColors } from '@newageerp/ui.styles.tailwind'
import { IconType } from '@newageerp/ui.icons.base.icon'
import { IconList } from '@newageerp/ui.icons.base.icon-list'
import { useComponentVisible } from '@newageerp/hooks.use-component-visible'
import { Menu, MenuItem } from '@newageerp/sfs.modal.menu'
import { UI, UIConfig } from '@newageerp/nae-react-ui'
import { useTranslation } from 'react-i18next';

interface Props {
    element: any,
}

export default function {{ compName }}(props: Props) {
    const {t} = useTranslation();

    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);
    const toggleComponentVisible = () => setIsComponentVisible(!isComponentVisible);

    const { isPopup } = UI.Popup.useNaePopup();
    const { showEditPopup } = UI.Window.useNaeWindow();

    const createOptions: any = {};

    {% for item in items %}
        createOptions["{{ item.target }}"] = {
            options: {
                convert: {
                    schema: "{{ schema }}",
                    element: { id: props.element.id },
                }
            },
            type: "{{ item.type }}",
            inPopup: {% if item.forcePopup %}true{% else %}false{% endif %},
            disabled: () => props.element.scopes && props.element.scopes.indexOf(`disable-copy-{{ schema }}-{{ item.target }}`) >= 0,
        }
    {% endfor %}

    const openLink = (target: string) => {
        const targetOptions = createOptions[target];

        if (isPopup || targetOptions.inPopup) {
            showEditPopup({
                id: "new",
                schema: target,
                newStateOptions: { createOptions: targetOptions.options },
                type: targetOptions.type,
            });
        } else {
            UIConfig.router({
                path: "/u/"+ target +"/" + targetOptions.type + "/edit/new",
                options: { createOptions: targetOptions.options }
            });
        }
    }

    return (
        <span className='relative' ref={ref}>
            <SquareButton
                    bgColor={TwBackgroundColors.slate50}
                    onClick={toggleComponentVisible}
                    icon={
                            {
                                icon: IconList.copy,
                                type: IconType.Solid,
                                className: TwTextColors.slate400
                            }
                    }
            />
            {!!isComponentVisible &&
                <Menu>
                    {% for item in items %}
                        <MenuItem
                                    onClick={() => openLink("{{ item.target }}")}
                                    disabled={createOptions["{{ item.target }}"].disabled()}
                        >
                            {{  item.targetTitle }}
                        </MenuItem>
                    {% endfor %}
                </Menu>
            }
        </span>
    )
}
