import { functions, UI, UIConfig } from "@newageerp/nae-react-ui";
import React from "react";
import { NaeSSchema, NaeSSchemaMap } from '../../config/NaeSSchema';
import { useHistory } from "react-router";
import { OpenApi } from '@newageerp/nae-react-auth-wrapper';
import { getDepenciesForField } from "../../config/fields/fieldDependencies";
import { NaeTabs } from "../../config/tabs";
import { INaeEditSettings, INaePdf, INaeProperty, INaeSchema, INaeStatus, INaeTab, INaeViewSettings, INaeWidget } from '@newageerp/nae-react-ui/dist/interfaces';
import { NaeSProperties } from '../../config/NaeSProperties';
import { NaeSStatuses } from "../../config/NaeSStatuses";
import { NaeViewFields } from "../../config/fields/view";
import { NaeEditFields } from "../../config/fields/edit";
import { NaeSPdfs } from '../../config/NaeSPdfs';
import { useRecoilValue } from "recoil";
import { NaeWidgets } from '../../config/widgets/index';
import { NaeSPropertiesKeys } from "../../config/NaeSPropertiesKeys";
import { getHookForSchema } from "../../UserComponents/ModelsCacheData/ModelFields";
import { IUIBuilderTabItem } from "@newageerp/nae-react-ui/dist/UIBuilderPages/UIBuilderTabsPage";
import { onEditElementUpdate } from "../../config/fields/onEditElementUpdate";
import { editPopupBySchemaAndType } from "../editforms/EditPopup";
import { fieldVisibility, resetFieldsToDefValues } from "../../config/fields/fieldVisibility";
import { selectorBySchemaSlug } from "../../Components/Models/ormSelectors";

// import {
//     NaeSSchemaFilterKeys,
//     NaeSSchemaGroupKeys,
//   } from "../../config/NaeGroupFields";

interface Props {
    children: any;
}

export default function InitComponent(props: Props) {
    const userState: any = useRecoilValue(OpenApi.naeUserState);
    const defaults = UI.UIBuilder.useUIBuilder();

    const history = useHistory();

    return (
        <UI.Config.UIInitConfig
            editPopupBySchemaAndType={editPopupBySchemaAndType}
            getHookForSchema={getHookForSchema}
            getSelectorForSchema={selectorBySchemaSlug}
            userState={userState}
            fieldVisibility={ () => fieldVisibility}
            router={(props) => {
                history.push(props.path, props.options);
            }}
            useURequest={OpenApi.useURequest}
            useUList={OpenApi.useUList}
            useURemove={OpenApi.useURemove}
            useUSave={OpenApi.useUSave}

            onEditElementUpdate={onEditElementUpdate}
            getDepenciesForField={getDepenciesForField}

            tabs={(): INaeTab[] => {
                return NaeTabs.concat(
                    defaults.tabs.map((t: IUIBuilderTabItem) =>

                        functions.config.configTabToInaeTab(t, defaults.defaults)

                    )
                );
            }}
            properties={(): INaeProperty[] => {
                return NaeSProperties;
            }}
            schemas={(): INaeSchema[] => {
                return NaeSSchema;
            }}
            statuses={(): INaeStatus[] => {
                return NaeSStatuses;
            }}
            editFields={(): INaeEditSettings[] => {
                const f = NaeEditFields.concat(
                    defaults.edit.map((e) => functions.config.configEditToINaeEditSettings(e))
                );
                return f;
            }}
            viewFields={(): INaeViewSettings[] => {
                return NaeViewFields.concat(
                    defaults.view.map((e) => functions.config.configViewToINaeViewSettings(e))
                );
            }}
            pdfs={(): INaePdf[] => {
                return NaeSPdfs;
            }}
            widgets={(): INaeWidget[] => {
                return NaeWidgets.concat(
                    defaults.widgets.map((e) => functions.config.configWidgetToINaeWidget(e))
                );
            }}
            toast={OpenApi.toast}
            resetFieldsToDefValues={(
                schema: string,
                element: any,
                hiddenFields: string[],
                updateElementBatch: (updates: any) => void
            ) => {
                resetFieldsToDefValues(schema, element, hiddenFields, updateElementBatch);
            }}
        >
            {props.children}
        </UI.Config.UIInitConfig>
    )
}
