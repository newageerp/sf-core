import React, {Fragment, useState, useEffect} from 'react';
import { useTranslation } from 'react-i18next'
import { OpenApi } from '@newageerp/nae-react-auth-wrapper';
import { UIConfig } from '@newageerp/nae-react-ui';
import { SquareButton } from '@newageerp/ui.buttons.base.square-button';
import { TwBackgroundColors } from '@newageerp/ui.styles.tailwind';

import {{ TP_COMP_NAME }} from '../forms/{{ TP_COMP_NAME }}';

import { useRecoilState } from "recoil";
import { UserSpaceWrapperToolbarState } from "../../layout/toolbar/UserSpaceWrapperToolbar";
import { useLocation } from 'react-router-dom';
import { WhiteCard } from '@newageerp/ui.cards.base.white-card';
import { subscribe, unsubscribe } from '../../v2/utils/utils';

interface Props {
    id: number | string,
    compact?: boolean,

    onSave: (element: any, isNew: boolean, schema: string) => void,
    onCancel: () => void,

    fieldsToReturnOnSave?: string[],

    disableSetTitle?: boolean,

    newStateOptions?: any,

    wrapWithCard?: boolean,
}

export default function {{ TP_COMP_NAME_DATA_SOURCE }}(props: Props) {
    const location = useLocation<any>()
    const locationState = location.state

    const [, setToolbarTitle] = useRecoilState(UserSpaceWrapperToolbarState)

    const { t } = useTranslation();

    const [hasChanges, setHasChanges] = useState(false)
    const [element, setElement] = useState<any>(null)

    const [saveData, saveDataParams] = OpenApi.useUSave(
        '{{ TP_SCHEMA }}',
        props.fieldsToReturnOnSave ? props.fieldsToReturnOnSave : ['id']
    );
    const doSave = () => {
        if (saveDataParams.loading) {
            return
        }
        const isNew = props.id === 'new'
        setHasChanges(false)
        saveData(element, props.id).then((res: any) => {
            if (res) {
                if (res.error) {
                    let errorText = typeof res.error === 'string' ? res.error : ''
                    if (res.error && res.error.response && res.error.response.data) {
                        errorText = res.error.response.data.description
                    }

                    if (
                        errorText &&
                        errorText[0] === '{' &&
                        errorText[errorText.length - 1] === '}'
                    ) {
                        const er = JSON.parse(errorText)
                        if (er.description) {
                            errorText = er.description
                        }
                    }
                    
                    UIConfig.toast.error(errorText)
                } else {
                    props.onSave(res.data.element, isNew, '{{ TP_SCHEMA }}');
                }
            }
        })
    }

    let fieldsToReturn: string[] = {{ TP_FIELDS_TO_RETURN|raw }};
    const [schemaGetData, schemaGetDataParams] = OpenApi.useUList(
        '{{ TP_SCHEMA }}',
        fieldsToReturn
    );
    const getData = () => {
        if (props.id === 'new') {
            schemaGetData(
                { empty: true },
                1,
                1,
                undefined,
                undefined,
                props.newStateOptions ? props.newStateOptions : locationState
            )
        } else {
            schemaGetData([{ and: [['i.id', 'eq', props.id, true]] }], 1, 1)
        }
    }
    useEffect(getData, [])

    useEffect(() => {
        if (schemaGetDataParams.data.records === 1) {
            setElement(schemaGetDataParams.data.data[0])
        }
    }, [schemaGetDataParams.data.data])

    const updateElement = (key: string, val: any) => {
        let _el = JSON.parse(JSON.stringify(element))
        if (val !== _el[key]) {
            setHasChanges(true)
            _el[key] = val
            
            _el = UIConfig.onEditElementUpdate('{{ TP_SCHEMA }}', key, val, _el, updateElement)

            setElement(_el)
        }
    }

    useEffect(() => {
        const listener = (e: any) => {
            updateElement(e.detail.key, e.detail.val);
        }
        subscribe("{{ TP_COMP_NAME_DATA_SOURCE }}Update", listener);

        return () => {
            unsubscribe("{{ TP_COMP_NAME_DATA_SOURCE }}Update", listener);
        }
    }, [updateElement]);

    const updateElementBatch =  (updates: any) => {
        let _el = JSON.parse(JSON.stringify(element))
        let _hasChanges = false
        Object.keys(updates).forEach((k: string) => {
            if (updates[k] !== _el[k]) {
                _hasChanges = true
                _el[k] = updates[k]

                _el =  UIConfig.onEditElementUpdate('{{ TP_SCHEMA }}', k, updates[k], _el, updateElement)
            }
        })

        if (_hasChanges) {
            setHasChanges(true)
            setElement(_el)
        }
    }

    useEffect(() => {
        if (!props.disableSetTitle) {
            setToolbarTitle('{% if toolbarTitle != "" %}{{ toolbarTitle }}{% else %}{" "}{% endif %}');
        }
    }, []);

    if (!element) {
        return <Fragment/>
    }

    if (props.wrapWithCard) {
        return (
            <WhiteCard size={"lg"}>
                <{{ TP_COMP_NAME }}
                    element={element}
                    onChange={updateElement}
                    onChangeBatch={updateElementBatch}
                    compact={props.compact}
                    onSave={doSave}
                    onCancel={props.onCancel}
                    hasChanges={hasChanges}
                />
            </WhiteCard>
        )
    }
    return (
            <Fragment>
                <{{ TP_COMP_NAME }}
                    element={element}
                    onChange={updateElement}
                    onChangeBatch={updateElementBatch}
                    compact={props.compact}
                    onSave={doSave}
                    onCancel={props.onCancel}
                    hasChanges={hasChanges}
                />
            </Fragment>
        )
}