import { UI } from '@newageerp/nae-react-ui';
import { MvcEditModalContentProps, MvcViewModalContentProps } from '@newageerp/nae-react-ui/dist/interfaces';
import React, { Fragment, useState, useEffect } from 'react';
import { Popup } from '@newageerp/ui.popups.base.popup'
import { {{ slugUc }}TitlesSingle } from '../../v2/entities/{{ slugUc }}/{{ slugUc }}Titles';
import MainEdit from '../../v2/edit-forms/MainEdit';

interface Props {
    onClose: () => void,
    editProps: MvcEditModalContentProps,
    setViewProps: (v: MvcViewModalContentProps) => void,
}

export default function {{ compName }}(props: Props) {
    const { editProps } = props;
    return (
        <Popup onClose={props.onClose} header={<{{ slugUc }}TitlesSingle/>}>
            <UI.Popup.NaePopupProvider isPopup={true} onClose={props.onClose}>
                <MainEdit
                    schema={editProps.schema}
                    type={editProps.type ? editProps.type : 'main'}
                    id={
                        typeof editProps.id !== 'string'
                            ? editProps.id.toString()
                            : editProps.id
                    }
                    header={UI.Content.EditHeaderType.hide}
                    onSave={editProps.onSaveCallback}
                    {# onSaveAndStay={(el: any, backFunc: any) => {
                        if (editProps.onSaveCallback) {
                            editProps.onSaveCallback(el, backFunc);
                        } else {
                            backFunc();
                        }
                        props.setViewProps({
                            schema: editProps.schema,
                            id: el.id,
                            type: 'main'
                        })
                    }} #}
                    onBack={props.onClose}
                    newStateOptions={editProps.newStateOptions}
                    skipHiddenCheck={editProps.skipHiddenCheck}
                    fieldsToReturnOnSave={editProps.fieldsToReturnOnSave}
                    contentWrap={UI.Card.TransparentCardCompact}
                    editContainerClassName={"pb-40"}
                    saveOnBottom={true}
                    skipRequiredCheck={ {% if skipRequiredCheck %}true{% else %}false{% endif %} }
                />
            </UI.Popup.NaePopupProvider>
        </Popup>
    )
}