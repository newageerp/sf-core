import React, {Fragment, useState, useEffect} from 'react';
import { Wide, WideToolbar, WideRow, Compact, CompactToolbar, CompactRow, Label } from '@newageerp/ui.form.base.form-pack';
import { useTranslation } from 'react-i18next'
import { TabContainer } from "@newageerp/ui.tabs.tab-container";
import { fieldVisibility } from '../../../config/fields/fieldVisibility';
import { functions, UI, UIConfig } from '@newageerp/nae-react-ui';
{{ TP_IMPORT|raw }}

interface Props {
    element: any;
    
    onChange: (key: string, value: any) => void,
    onChangeBatch:  (updates: any) => void,

    hasChanges: boolean,
    compact?: boolean,

    onSave: () => void,
    onCancel: () => void,

    skipHiddenCheck?: boolean,
}

export default function {{ TP_COMP_NAME }}(props: Props) {
    const [hiddenFields, setHiddenFields] = useState<string[]>([]);

    const { element, onChange } = props;
    const { t } = useTranslation();

    useEffect(() => {
        let _hiddenFields: any = []
        const schemaFieldVisibility = fieldVisibility['{{ TP_SCHEMA }}'];
        if (schemaFieldVisibility && !props.skipHiddenCheck) {
            
            {% for stepRows in rows %}
                {% for row in stepRows %}
                    {% for field in row %}
                        {% if field.needCheck %}
                            if (!!schemaFieldVisibility['{{ field.propertyKey }}'] && schemaFieldVisibility['{{ field.propertyKey }}']({
                                schema: '{{ TP_SCHEMA }}',
                                element: props.element,
                                user: UIConfig.userState,
                                parentElement: undefined,
                                hasChanges: props.hasChanges,
                                updateElement: props.onChange,
                                type: '{{ editType }}',
                                isEdit: true
                            })) {
                                _hiddenFields.push('{{ field.propertyKey }}');
                            }
                        {% endif %}
                    {% endfor %}
                {% endfor %}
            {% endfor %}
        }
        if (JSON.stringify(hiddenFields) !== JSON.stringify(_hiddenFields)) {
            setHiddenFields(_hiddenFields);
        }
    }, [element]);

    useEffect(() => {
        UIConfig.resetFieldsToDefValues(
            '{{ TP_SCHEMA }}',
            props.element,
            JSON.parse(JSON.stringify(hiddenFields)),
            props.onChangeBatch,
        )
    }, [hiddenFields]);

    if (props.compact) {
        return (
            <Compact>
                {% for stepRows in rows %}
                    {% for row in stepRows %}
                        {% set colsLength = row|length %}
                        {% if colsLength > 1 %}
                            <div className="flex items-center justify-start gap-4">
                        {% endif %}
                        {% for field in row %}
                            {% if field.needCheck %}
                                {hiddenFields.indexOf('{{ field.propertyKey }}') === -1 &&
                            {% endif %}
                            {{ field.c|raw }}
                            {% if field.needCheck %}
                                }
                            {% endif %}
                        {% endfor %}
                        {% if colsLength > 1 %}
                            </div>
                        {% endif %}
                    {% endfor %}
                {% endfor %}
                <CompactToolbar onSave={props.onSave} onCancel={props.onCancel} />
            </Compact>
        )
    }

    const wideGroups : any = {};
    {% set stepsLength = rows|length %}
    const withoutSteps = {% if stepsLength == 1 %}true{% else %}false{% endif %};

    {% for stepKey, stepRows in rows %}
        wideGroups['{{ stepKey }}'] = (
            <Wide>
                {% for row in stepRows %}
                    {% set colsLength = row|length %}
                    {% if colsLength > 1 %}
                        <div className="flex items-center justify-start gap-4">
                    {% endif %}
                    {% for field in row %}
                        {% if field.needCheck %}
                            {hiddenFields.indexOf('{{ field.propertyKey }}') === -1 &&
                        {% endif %}
                        {{ field.w|raw }}
                        {% if field.needCheck %}
                            }
                        {% endif %}
                    {% endfor %}
                    {% if colsLength > 1 %}
                        </div>
                    {% endif %}
                {% endfor %}
                
            </Wide>
        );
    {% endfor %}



    return (<Wide>
        {withoutSteps && wideGroups['-']}
        {!withoutSteps && <TabContainer items={[
            {% for stepKey, stepRows in rows %}
            {
                content: wideGroups['{{ stepKey }}'],
                tab: {
                    children: "{{ stepKey }}",
                },
            },
            {% endfor %}
        ]} />}
        <WideToolbar onSave={props.onSave} onCancel={props.onCancel} />
    </Wide>)
}