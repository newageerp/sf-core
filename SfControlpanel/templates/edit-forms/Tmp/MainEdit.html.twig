import React, { Fragment, useEffect, useState } from 'react'

import { useLocation } from 'react-router-dom'
import { useTranslation } from 'react-i18next'

import { functions, UI, UIConfig } from '@newageerp/nae-react-ui'
import { INaeEditSettings } from '@newageerp/nae-react-ui/dist/interfaces'

import TemplateLoader, {
  useTemplateLoader,
} from "../../v3/templates/TemplateLoader";
import { fieldVisibility, IFieldVisibility } from "../../../config/fields/fieldVisibility";
import { OpenApi } from '@newageerp/nae-react-auth-wrapper'

export interface MainEditTemplateData {
  element: any,
  updateElement: (key: string, val: any) => void,
  fieldVisibility: IFieldVisibility,
  parentElement: any,
  hasChanges: boolean,
  formType: string,
  pushHiddenFields: (fieldKey: string) => void
}

interface Props {
  schema: string
  type: string
  id: string


  onSave?: (el: any, backFunc: any) => void
  onSaveAndStay?: (el: any, backFunc: any) => void

  onBack?: (isNew: boolean, el?: any) => void

  newStateOptions?: any

  skipHiddenCheck?: boolean

  contentWrap?: any

  fieldsToReturnOnSave?: string[]

  editContainerClassName?: string,

  skipRequiredCheck?: boolean,
}

export default function MainEdit(props: Props) {
  const { data: tData } = useTemplateLoader();

  let hiddenFields: any = []
  const { t } = useTranslation()
  const location = useLocation<any>()
  const locationState = location.state

  const [saveData, saveDataParams] = UIConfig.useUSave(
    props.schema,
    props.fieldsToReturnOnSave ? props.fieldsToReturnOnSave : ['id']
  )

  // WORKFLOW
  const [hasChanges, setHasChanges] = useState(false)
  const [element, setElement] = useState<any>(null)

  const updateElement = (key: string, val: any) => {
    let _el = JSON.parse(JSON.stringify(element))
    if (val !== _el[key]) {
      setHasChanges(true)
      _el[key] = val

      _el = UIConfig.onEditElementUpdate(props.schema, key, val, _el, updateElement)

      setElement(_el)
    }
  }
  const updateElementBatch = (updates: any) => {
    let _el = JSON.parse(JSON.stringify(element))
    let _hasChanges = false
    Object.keys(updates).forEach((k: string) => {
      if (updates[k] !== _el[k]) {
        _hasChanges = true
        _el[k] = updates[k]

        _el = UIConfig.onEditElementUpdate(props.schema, k, updates[k], _el, updateElement)
      }
    })

    if (_hasChanges) {
      setHasChanges(true)
      setElement(_el)
    }
  }

  const doSave = () => {
    if (saveDataParams.loading) {
      return
    }
    const isNew = props.id === 'new'
    setHasChanges(false)
    saveData({ ...element, skipRequiredCheck: props.skipRequiredCheck }, props.id).then((res: any) => {
      if (res) {
        if (res.error) {
        } else {
          const backFunction = () => {
            if (props.onBack) {
              props.onBack(isNew, res.data.element)
            }
          }
          if (props.onSave) {
            props.onSave(res.data.element, backFunction)
          } else {
            backFunction()
          }
        }
      }
    })
  }

  const doSaveAndStay = () => {
    if (saveDataParams.loading) {
      return
    }
    const isNew = props.id === 'new'
    setHasChanges(false)
    saveData(element, props.id).then((res: any) => {
      if (res) {
        if (res.error) {
          OpenApi.toast.error(t("Klaida"));
        } else {
          OpenApi.toast.success(t("IÅ¡saugota"));

          const backFunction = () => {
            if (props.onBack) {
              props.onBack(isNew, res.data.element)
            }
          }
          if (props.onSaveAndStay) {
            props.onSaveAndStay(res.data.element, backFunction)
          } else {
            backFunction()
          }
        }
      }
    })
  }

  const editSettings = functions.fields.getEditFieldsForSchema(props.schema, props.type)
  const editFields: INaeEditSettings = editSettings
    ? editSettings
    : { fields: [], schema: '', type: '' }
  let fieldsToReturn: string[] = functions.viewTransform.getElementFieldsToReturn(
    editFields,
    (key: string) => UIConfig.getDepenciesForField(props.schema, key)
  )

  const [schemaGetData, schemaGetDataParams] = UIConfig.useUList(
    props.schema,
    fieldsToReturn
  )
  const getData = () => {
    if (props.id === 'new') {
      schemaGetData(
        { empty: true },
        1,
        1,
        undefined,
        undefined,
        props.newStateOptions ? props.newStateOptions : locationState
      )
    } else {
      schemaGetData([{ and: [['i.id', 'eq', props.id, true]] }], 1, 1)
    }
  }
  useEffect(getData, [])

  useEffect(() => {
    if (schemaGetDataParams.data.records === 1) {
      setElement(schemaGetDataParams.data.data[0])
    }
  }, [schemaGetDataParams.data.data])


  const goBack = props.onBack ? () => {
    if (props.onBack) {
      props.onBack(false);
    }
  } : undefined;

  const templateData = {
    element,
    updateElement,
    fieldVisibility,
    hasChanges,
    formType: props.type,
    pushHiddenFields: (fieldKey: string) => hiddenFields.push(fieldKey),
    onSave: doSave,
    onExtraSave: props.onSaveAndStay ? doSaveAndStay : undefined,
    onBack: goBack
  }


  UIConfig.resetFieldsToDefValues(
    props.schema,
    element,
    JSON.parse(JSON.stringify(hiddenFields)),
    updateElementBatch
  )


  return (
    <Fragment>
      {element ? (
        <div className={`tw3-space-y-4 tw3-max-w-[1200px] tw3-mx-auto ${props.editContainerClassName ? props.editContainerClassName : ''}`}>



          {element ? (
            <Fragment>
              <TemplateLoader
                templates={[tData.formContent]}
                templateData={templateData}
              />

            </Fragment>
          ) : (
            <Fragment />
          )}


          {!!saveDataParams.error && <UI.Form.ErrorAlert error={saveDataParams.error} />}

          <UI.Widget.Widget
            type={UI.Widget.WidgetType.editRight}
            element={element}
            schema={props.schema ? props.schema : '-'}
            saveError={saveDataParams.error}
          />
        </div>
      ) : (
        <Fragment />
      )}
    </Fragment>

  )
}
